// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/coordinate": {
            "delete": {
                "description": "Delete weather service coordinates based on the provided ID.",
                "produces": [
                    "application/json"
                ],
                "summary": "Delete weather service coordinates by ID",
                "operationId": "delete-coordinates",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the coordinates to be deleted",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Record deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request. Invalid ID format.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. Failed to delete coordinates.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/coordinate/history": {
            "get": {
                "description": "Retrieve the current weather service coordinates.",
                "produces": [
                    "application/json"
                ],
                "summary": "Get weather service coordinates",
                "operationId": "get-coordinates",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved coordinates",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/service.Coordinate"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. Failed to fetch coordinates.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/forecast": {
            "get": {
                "description": "Retrieve weather forecast data for a given latitude and longitude.",
                "produces": [
                    "application/json"
                ],
                "summary": "Get weather forecast based on latitude and longitude",
                "operationId": "get-forecast",
                "parameters": [
                    {
                        "type": "number",
                        "description": "Latitude coordinate",
                        "name": "latitude",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "Longitude coordinate",
                        "name": "longitude",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved forecast data",
                        "schema": {
                            "$ref": "#/definitions/service.Forecast"
                        }
                    },
                    "400": {
                        "description": "Bad Request. Invalid latitude or longitude.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. Failed to fetch forecast data.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "service.Coordinate": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                }
            }
        },
        "service.Forecast": {
            "type": "object",
            "properties": {
                "forecast": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.Weather"
                    }
                },
                "latitude": {
                    "type": "string"
                },
                "longitude": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/service.Status"
                }
            }
        },
        "service.Status": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "error": {
                    "type": "boolean"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "service.Weather": {
            "type": "object",
            "properties": {
                "time": {
                    "type": "string"
                },
                "weather": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Duplo Weather Forecast",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
