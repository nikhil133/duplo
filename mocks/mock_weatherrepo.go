// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nikhil133/duplo/src/repositoryinterface (interfaces: WeatherRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockWeatherRepository is a mock of WeatherRepository interface
type MockWeatherRepository struct {
	ctrl     *gomock.Controller
	recorder *MockWeatherRepositoryMockRecorder
}

// MockWeatherRepositoryMockRecorder is the mock recorder for MockWeatherRepository
type MockWeatherRepositoryMockRecorder struct {
	mock *MockWeatherRepository
}

// NewMockWeatherRepository creates a new mock instance
func NewMockWeatherRepository(ctrl *gomock.Controller) *MockWeatherRepository {
	mock := &MockWeatherRepository{ctrl: ctrl}
	mock.recorder = &MockWeatherRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWeatherRepository) EXPECT() *MockWeatherRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method
func (m *MockWeatherRepository) Delete(arg0 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockWeatherRepositoryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockWeatherRepository)(nil).Delete), arg0)
}

// Get mocks base method
func (m *MockWeatherRepository) Get(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockWeatherRepositoryMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockWeatherRepository)(nil).Get), arg0)
}

// Insert mocks base method
func (m *MockWeatherRepository) Insert(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockWeatherRepositoryMockRecorder) Insert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockWeatherRepository)(nil).Insert), arg0)
}
